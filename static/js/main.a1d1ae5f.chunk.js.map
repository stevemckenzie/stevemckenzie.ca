{"version":3,"sources":["App/styles.module.css","App/index.js","serviceWorker.js","index.js"],"names":["module","exports","backgrounds","App","background","random","length","className","styles","app","style","backgroundImage","title","content","me","social","github","href","rel","target","linkedin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6GACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,QAAU,wBAAwB,GAAK,mBAAmB,OAAS,uBAAuB,OAAS,uBAAuB,SAAW,2B,+HCI3KC,EAAc,CAClB,yBACA,sBACA,uBACA,yBACA,4BAyCaC,MAtCf,WACE,IAAMC,EAAaF,EAAYG,iBAAO,EAAGH,EAAYI,OAAS,IAE9D,OACE,yBACEC,UAAWC,IAAOC,IAClBC,MAAO,CAAEC,gBAAgB,QAAD,OAAUP,EAAV,OACxBQ,MAAM,0DAEN,yBAAKL,UAAWC,IAAOK,SACrB,yBAAKN,UAAWC,IAAOM,KACvB,8CACA,qEACA,yBAAKP,UAAWC,IAAOO,QACrB,uBACER,UAAWC,IAAOQ,OAClBC,KAAK,mCACLC,IAAI,sBACJC,OAAO,SACPP,MAAM,UAEN,yCAEF,uBACEL,UAAWC,IAAOY,SAClBH,KAAK,6CACLC,IAAI,sBACJC,OAAO,SACPP,MAAM,YAEN,+CC/BQS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a1d1ae5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__eLOzb\",\"content\":\"styles_content__2Pg01\",\"me\":\"styles_me__2OW1o\",\"social\":\"styles_social__2d_39\",\"github\":\"styles_github__21pmM\",\"linkedin\":\"styles_linkedin__37Pc8\"};","import { random } from 'lodash';\nimport React from 'react';\n\nimport styles from './styles.module.css';\n\nconst backgrounds = [\n  '/photos/coquihalla.jpg',\n  '/photos/glacier.jpg',\n  '/photos/ice-flea.jpg',\n  '/photos/livingston.jpg',\n  '/photos/seven-oclock.jpg',\n];\n\nfunction App() {\n  const background = backgrounds[random(0, backgrounds.length - 1)];\n\n  return (\n    <div\n      className={styles.app}\n      style={{ backgroundImage: `url('${background}')` }}\n      title=\"Steve McKenzie - Builder of stuff, explorer of things.\"\n    >\n      <div className={styles.content}>\n        <div className={styles.me} />\n        <h1>Steve McKenzie</h1>\n        <h2>Builder of stuff, explorer of things.</h2>\n        <div className={styles.social}>\n          <a\n            className={styles.github}\n            href=\"https://github.com/stevemckenzie\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            title=\"GitHub\"\n          >\n            <span>GitHub</span>\n          </a>\n          <a\n            className={styles.linkedin}\n            href=\"https://www.linkedin.com/in/steve-mckenzie\"\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n            title=\"LinkedIn\"\n          >\n            <span>LinkedIn</span>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
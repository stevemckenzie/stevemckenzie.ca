{"version":3,"sources":["App/styles.module.scss","Photos/styles.module.scss","Photos/component.js","Photos/index.js","App/index.js","serviceWorker.js","index.js"],"names":["module","exports","Photos","photos","props","className","styles","renderIndicator","onClick","isSelected","index","label","classnames","indicator","selected","map","file","style","photo","key","backgroundImage","DEFAULT_CAROUSEL_SETTINGS","autoPlay","dynamicHeight","infiniteLoop","interval","showArrows","showStatus","showThumbs","swipeable","transitionTime","useKeyboardArrows","useState","photoList","setPhotoList","useSmall","document","body","clientWidth","large","small","useEffect","list","JSON","parse","process","shuffle","length","BIO","NAME","App","app","content","title","me","social","github","href","rel","target","linkedin","Boolean","window","location","hostname","match","ReactGA","initialize","pageview","pathname","search","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iJACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,QAAU,wBAAwB,GAAK,mBAAmB,OAAS,uBAAuB,OAAS,uBAAuB,SAAW,2B,uCCAjLD,EAAOC,QAAU,CAAC,OAAS,uBAAuB,UAAY,0BAA0B,SAAW,yBAAyB,MAAQ,wB,iLCsCrHC,EA/BA,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,OAAWC,EAAY,0BAYvC,OACE,yBAAKC,UAAWC,IAAOH,QACrB,kBAAC,WAAD,eAAUI,gBAbU,SAACC,EAASC,EAAYC,EAAOC,GAA7B,OACtB,4BACEN,UAAWO,IAAWN,IAAOO,UAAR,eAClBP,IAAOQ,SAAWL,IAErBD,QAASA,GAET,8BAAOE,EAAQ,MAMiCN,GAC7CD,EAAOY,KAAI,gBAAGC,EAAH,EAAGA,KAAH,IAASC,aAAT,MAAiB,GAAjB,SACV,yBACEZ,UAAWC,IAAOY,MAClBC,IAAKH,EACLC,MAAK,aAAIG,gBAAgB,QAAD,OAAUJ,EAAV,OAAuBC,WCrBrDI,EAA4B,CAChCC,UAAU,EACVC,eAAe,EACfC,cAAc,EACdC,SAAU,IACVC,YAAY,EACZC,YAAY,EACZC,YAAY,EACZC,WAAW,EACXC,eAAgB,IAChBC,mBAAmB,GAwBN7B,EArBA,WAAO,IAAD,EACe8B,mBAAS,IADxB,mBACZC,EADY,KACDC,EADC,KAEbC,EAAWC,SAASC,KAAKC,YAhBd,IAiBXnC,EAAS8B,EAAUlB,KAAI,gBAAGwB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAV,OAC3BL,GAAYK,EAAQA,EAAQD,KAU9B,OAPAE,qBAAU,WAAO,IAETC,EAAOC,KAAKC,MADWC,soDAG7BX,EAAaY,kBAAQJ,MACpB,IAEmB,IAAlBvC,EAAO4C,OACF,KAGF,kBAAC,EAAD,iBAAe1B,EAAf,CAA0ClB,OAAQA,M,gBC/BrD6C,EAAM,wCACNC,EAAO,iBAiCEC,EA/BH,kBACV,yBAAK7C,UAAWC,IAAO6C,KACrB,kBAAC,EAAD,MACA,yBAAK9C,UAAWC,IAAO8C,QAASC,MAAK,UAAKJ,EAAL,cAAeD,IAClD,yBAAK3C,UAAWC,IAAOgD,KACvB,4BAAKL,GACL,4BAAKD,GACL,yBAAK3C,UAAWC,IAAOiD,QACrB,uBACElD,UAAWC,IAAOkD,OAClBC,KAAK,mCACLC,IAAI,sBACJC,OAAO,SACPN,MAAM,UAEN,yCAEF,uBACEhD,UAAWC,IAAOsD,SAClBH,KAAK,6CACLC,IAAI,sBACJC,OAAO,SACPN,MAAM,YAEN,+CCrBUQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAAQC,WAAW,gBACnBD,IAAQE,SAASN,OAAOC,SAASM,SAAWP,OAAOC,SAASO,QAE5DC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrC,SAASsC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4bab95b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"styles_app__3zBUL\",\"content\":\"styles_content__Jw4F6\",\"me\":\"styles_me__24j6J\",\"social\":\"styles_social__2nQie\",\"github\":\"styles_github__3vLW4\",\"linkedin\":\"styles_linkedin__Sik1e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photos\":\"styles_photos__3YJ39\",\"indicator\":\"styles_indicator__CUN7G\",\"selected\":\"styles_selected__Vkxe3\",\"photo\":\"styles_photo__2NuJP\"};","import classnames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { Carousel } from 'react-responsive-carousel';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\n\nimport styles from './styles.module.scss';\n\nconst Photos = ({ photos, ...props }) => {\n  const renderIndicator = (onClick, isSelected, index, label) => (\n    <button\n      className={classnames(styles.indicator, {\n        [styles.selected]: isSelected,\n      })}\n      onClick={onClick}\n    >\n      <span>{index + 1}</span>\n    </button>\n  );\n\n  return (\n    <div className={styles.photos}>\n      <Carousel renderIndicator={renderIndicator} {...props}>\n        {photos.map(({ file, style = {} }) => (\n          <div\n            className={styles.photo}\n            key={file}\n            style={{ backgroundImage: `url('${file}')`, ...style }}\n          />\n        ))}\n      </Carousel>\n    </div>\n  );\n};\n\nPhotos.propTypes = {\n  photos: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Photos;\n","import { shuffle } from 'lodash';\nimport React, { useEffect, useState } from 'react';\n\nimport Component from './component';\n\nconst BREAKPOINT = 768;\nconst DEFAULT_CAROUSEL_SETTINGS = {\n  autoPlay: true,\n  dynamicHeight: false,\n  infiniteLoop: true,\n  interval: 8000,\n  showArrows: false,\n  showStatus: false,\n  showThumbs: false,\n  swipeable: true,\n  transitionTime: 800,\n  useKeyboardArrows: true,\n};\n\nconst Photos = () => {\n  const [photoList, setPhotoList] = useState([]);\n  const useSmall = document.body.clientWidth < BREAKPOINT;\n  const photos = photoList.map(({ large, small }) =>\n    useSmall && small ? small : large,\n  );\n\n  useEffect(() => {\n    const { REACT_APP_PHOTOS } = process.env;\n    const list = JSON.parse(REACT_APP_PHOTOS || {});\n\n    setPhotoList(shuffle(list));\n  }, []);\n\n  if (photos.length === 0) {\n    return null;\n  }\n\n  return <Component {...DEFAULT_CAROUSEL_SETTINGS} photos={photos} />;\n};\n\nexport default Photos;\n","import React from 'react';\n\nimport Photos from '../Photos';\n\nimport styles from './styles.module.scss';\n\nconst BIO = 'Builder of stuff, explorer of things.';\nconst NAME = 'Steve McKenzie';\n\nconst App = () => (\n  <div className={styles.app}>\n    <Photos />\n    <div className={styles.content} title={`${NAME} - ${BIO}`}>\n      <div className={styles.me} />\n      <h1>{NAME}</h1>\n      <h2>{BIO}</h2>\n      <div className={styles.social}>\n        <a\n          className={styles.github}\n          href=\"https://github.com/stevemckenzie\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          title=\"GitHub\"\n        >\n          <span>GitHub</span>\n        </a>\n        <a\n          className={styles.linkedin}\n          href=\"https://www.linkedin.com/in/steve-mckenzie\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n          title=\"LinkedIn\"\n        >\n          <span>LinkedIn</span>\n        </a>\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ReactGA from 'react-ga';\n\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactGA.initialize('UA-8486028-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}